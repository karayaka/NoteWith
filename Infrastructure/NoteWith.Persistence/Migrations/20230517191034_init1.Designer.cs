// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteWith.Persistence.NoteDataContexts;

#nullable disable

namespace NoteWith.Persistence.Migrations
{
    [DbContext(typeof(NoteDataContext))]
    [Migration("20230517191034_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.BudgetModels.Budget", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("BudgeType")
                        .HasColumnType("int");

                    b.Property<string>("BudgetName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("BudgetTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.BudgetModels.BudgetDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("BudgetDetailType")
                        .HasColumnType("int");

                    b.Property<Guid>("BudgetID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("BudgetID");

                    b.HasIndex("UserID");

                    b.ToTable("BudgetDetails");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEvent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsComplated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("WorkEvents");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEventExcludedUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .HasColumnType("longtext");

                    b.Property<Guid>("EventID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("WorkEventExcludedUsers");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEventGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("WorkEventGroups");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEventNotifiedMe", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventID")
                        .HasColumnType("char(36)");

                    b.Property<string>("NotificatonID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("WorkEventNotifiedMes");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GroupFirebaseConnctionID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("WorkGroups");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroupAccesKey", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expaired")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("KeyOwnerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("KeyOwnerId");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("WorkGroupAccesKeys");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroupUsers", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNute")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("WorkGroupUsers");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.MessageModels.PersonelMessageModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiverID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("PersonelMessageModels");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.MessageModels.WorkGroupMessage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("SenderID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("WorkGroupMessages");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.Note", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("GroupEditable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.NoteExcludedUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .HasColumnType("longtext");

                    b.Property<Guid>("NoteID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("NoteID");

                    b.HasIndex("UserID");

                    b.ToTable("NoteExcludedUsers");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.NoteGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("NoteID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("NoteID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("NoteGroups");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.NoteNotifiedMe", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("NoteID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("NoteID");

                    b.HasIndex("UserID");

                    b.ToTable("NoteNotifiedMes");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoticeModels.Notice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoticeModels.NoticeSeenUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("NoticeID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("NoticeID");

                    b.HasIndex("UserID");

                    b.ToTable("NoticeSeenUsers");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoticeModels.WorkGroupNotice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("NoticeID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("NoticeID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("WorkGroupNotices");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NotifiedModels.NotificationModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.UserModels.UserModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailConfirmeToken")
                        .HasColumnType("longtext");

                    b.Property<string>("FireBaseConnectionID")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WorkFilesFolderID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("WorkFilesFolderID");

                    b.ToTable("WorkFiles");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkFilesFolder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("WorkFilesFolders");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkGroupAlbum", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("WorkGroupID");

                    b.ToTable("WorkGroupAlbums");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkPhoto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AlbumID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlMediumImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlOrgin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlSmallImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("AlbumID");

                    b.ToTable("WorkPhotos");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.ListWorkGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkGroupID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WorkListID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("WorkGroupID");

                    b.HasIndex("WorkListID");

                    b.ToTable("ListWorkGroups");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .HasColumnType("longtext");

                    b.Property<bool>("GroupEditable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("WorkLists");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkListExcludedUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .HasColumnType("longtext");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WorkListID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkListID");

                    b.ToTable("WorkListExcludedUsers");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkListItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ComplaterUserID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCoplated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkListID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("ComplaterUserID");

                    b.HasIndex("WorkListID");

                    b.ToTable("WorkListItems");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkListNotifiedMe", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreadedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreadedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WorkListID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkListID");

                    b.ToTable("WorkListNotifiedMes");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.BudgetModels.Budget", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("WorkGroupID");

                    b.Navigation("User");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.BudgetModels.BudgetDetail", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.BudgetModels.Budget", "Budget")
                        .WithMany("BudgetDetails")
                        .HasForeignKey("BudgetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Budget");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEventExcludedUser", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.EventModels.WorkEvent", "Event")
                        .WithMany("ExcludedUsers")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEventGroup", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.EventModels.WorkEvent", "Event")
                        .WithMany("Groups")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("EventGroups")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEventNotifiedMe", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.EventModels.WorkEvent", "Event")
                        .WithMany("NotifiedMes")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroupAccesKey", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "KeyOwner")
                        .WithMany("WorkGroupAccesKeys")
                        .HasForeignKey("KeyOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("WorkGroupAccesKeys")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyOwner");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroupUsers", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany("WorkGroupUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("WorkGroupUsers")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.MessageModels.PersonelMessageModel", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.MessageModels.WorkGroupMessage", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("Messages")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.NoteExcludedUser", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.NoteModels.Note", "Note")
                        .WithMany("ExcludedUsers")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.NoteGroup", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.NoteModels.Note", "Note")
                        .WithMany("NoteGroups")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("NoteGroups")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.NoteNotifiedMe", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.NoteModels.Note", "Note")
                        .WithMany("Notifieds")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoticeModels.NoticeSeenUser", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.NoticeModels.Notice", "Notice")
                        .WithMany("SeenUsers")
                        .HasForeignKey("NoticeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoticeModels.WorkGroupNotice", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.NoticeModels.Notice", "Notice")
                        .WithMany("WorkGroups")
                        .HasForeignKey("NoticeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("Notices")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notice");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NotifiedModels.NotificationModel", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkFile", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.WorkFiles.WorkFilesFolder", "WorkFilesFolder")
                        .WithMany("WorkFiles")
                        .HasForeignKey("WorkFilesFolderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFilesFolder");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkFilesFolder", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("Folders")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkGroupAlbum", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("Albums")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkPhoto", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.WorkFiles.WorkGroupAlbum", "Album")
                        .WithMany("WorkPhotos")
                        .HasForeignKey("AlbumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.ListWorkGroup", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", "WorkGroup")
                        .WithMany("WorkLists")
                        .HasForeignKey("WorkGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.WorkLists.WorkList", "WorkList")
                        .WithMany("WorkGroups")
                        .HasForeignKey("WorkListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkGroup");

                    b.Navigation("WorkList");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkListExcludedUser", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.WorkLists.WorkList", "WorkList")
                        .WithMany("ExcludedUsers")
                        .HasForeignKey("WorkListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkList");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkListItem", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "ComplaterUser")
                        .WithMany()
                        .HasForeignKey("ComplaterUserID");

                    b.HasOne("NoteWith.Domain.EntitiyModels.WorkLists.WorkList", "WorkList")
                        .WithMany("Items")
                        .HasForeignKey("WorkListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplaterUser");

                    b.Navigation("WorkList");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkListNotifiedMe", b =>
                {
                    b.HasOne("NoteWith.Domain.EntitiyModels.UserModels.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteWith.Domain.EntitiyModels.WorkLists.WorkList", "WorkList")
                        .WithMany("WorkListNotifiedMes")
                        .HasForeignKey("WorkListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkList");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.BudgetModels.Budget", b =>
                {
                    b.Navigation("BudgetDetails");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.EventModels.WorkEvent", b =>
                {
                    b.Navigation("ExcludedUsers");

                    b.Navigation("Groups");

                    b.Navigation("NotifiedMes");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.GroupModels.WorkGroup", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("EventGroups");

                    b.Navigation("Folders");

                    b.Navigation("Messages");

                    b.Navigation("NoteGroups");

                    b.Navigation("Notices");

                    b.Navigation("WorkGroupAccesKeys");

                    b.Navigation("WorkGroupUsers");

                    b.Navigation("WorkLists");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoteModels.Note", b =>
                {
                    b.Navigation("ExcludedUsers");

                    b.Navigation("NoteGroups");

                    b.Navigation("Notifieds");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.NoticeModels.Notice", b =>
                {
                    b.Navigation("SeenUsers");

                    b.Navigation("WorkGroups");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.UserModels.UserModel", b =>
                {
                    b.Navigation("WorkGroupAccesKeys");

                    b.Navigation("WorkGroupUsers");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkFilesFolder", b =>
                {
                    b.Navigation("WorkFiles");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkFiles.WorkGroupAlbum", b =>
                {
                    b.Navigation("WorkPhotos");
                });

            modelBuilder.Entity("NoteWith.Domain.EntitiyModels.WorkLists.WorkList", b =>
                {
                    b.Navigation("ExcludedUsers");

                    b.Navigation("Items");

                    b.Navigation("WorkGroups");

                    b.Navigation("WorkListNotifiedMes");
                });
#pragma warning restore 612, 618
        }
    }
}
